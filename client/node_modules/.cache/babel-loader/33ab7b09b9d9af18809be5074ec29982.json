{"ast":null,"code":"var _jsxFileName = \"/Users/asl/PROJECTS/book-nugget/client/src/components/post/Post.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types'; // components\n\nimport Spinner from '../layout/Spinner';\nimport PostItem from '../posts/PostItem'; // redux\n\nimport { connect } from 'react-redux';\nimport { getPost } from '../../actions/post';\nimport CommentItem from './CommentItem';\nimport CommentForm from './CommentForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Post = ({\n  getPost,\n  post: {\n    post,\n    loading\n  },\n  match\n}) => {\n  _s();\n\n  useEffect(() => {\n    getPost(match.params.post_id);\n  }, [getPost]);\n  return loading || post === null ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 36\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(PostItem, {\n      post: post,\n      showActions: false\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(CommentForm, {\n      postId: post._id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: post.comments.map(comment => /*#__PURE__*/_jsxDEV(CommentItem, {\n        comment: comment,\n        postId: post._id\n      }, comment._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 51\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 17\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Post, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Post;\nPost.propTypes = {\n  getPost: PropTypes.func.isRequired,\n  post: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  post: state.post\n});\n\nexport default connect(mapStateToProps, {\n  getPost\n})(Post);\n\nvar _c;\n\n$RefreshReg$(_c, \"Post\");","map":{"version":3,"sources":["/Users/asl/PROJECTS/book-nugget/client/src/components/post/Post.js"],"names":["React","Fragment","useEffect","PropTypes","Spinner","PostItem","connect","getPost","CommentItem","CommentForm","Post","post","loading","match","params","post_id","_id","comments","map","comment","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,QAAP,MAAqB,mBAArB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,WAAP,MAAwB,eAAxB;;;AAEA,MAAMC,IAAI,GAAG,CAAC;AAAEH,EAAAA,OAAF;AAAWI,EAAAA,IAAI,EAAE;AAAEA,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAjB;AAAoCC,EAAAA;AAApC,CAAD,KAAiD;AAAA;;AAE1DX,EAAAA,SAAS,CAAC,MAAM;AACZK,IAAAA,OAAO,CAACM,KAAK,CAACC,MAAN,CAAaC,OAAd,CAAP;AACH,GAFQ,EAEN,CAACR,OAAD,CAFM,CAAT;AAIA,SACIK,OAAO,IAAID,IAAI,KAAK,IAApB,gBAA2B,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UAA3B,gBACA,QAAC,QAAD;AAAA,4BACQ,QAAC,QAAD;AAAU,MAAA,IAAI,EAAEA,IAAhB;AAAsB,MAAA,WAAW,EAAE;AAAnC;AAAA;AAAA;AAAA;AAAA,YADR,eAEQ,QAAC,WAAD;AAAa,MAAA,MAAM,EAAEA,IAAI,CAACK;AAA1B;AAAA;AAAA;AAAA;AAAA,YAFR,eAGQ;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA,gBACKL,IAAI,CAACM,QAAL,CAAcC,GAAd,CAAkBC,OAAO,iBAAI,QAAC,WAAD;AAA+B,QAAA,OAAO,EAAEA,OAAxC;AAAiD,QAAA,MAAM,EAAER,IAAI,CAACK;AAA9D,SAAkBG,OAAO,CAACH,GAA1B;AAAA;AAAA;AAAA;AAAA,cAA7B;AADL;AAAA;AAAA;AAAA;AAAA,YAHR;AAAA;AAAA;AAAA;AAAA;AAAA,UAFJ;AAUH,CAhBD;;GAAMN,I;;KAAAA,I;AAkBNA,IAAI,CAACU,SAAL,GAAiB;AACbb,EAAAA,OAAO,EAAEJ,SAAS,CAACkB,IAAV,CAAeC,UADX;AAEbX,EAAAA,IAAI,EAAER,SAAS,CAACoB,MAAV,CAAiBD;AAFV,CAAjB;;AAKA,MAAME,eAAe,GAAGC,KAAK,KAAK;AAC9Bd,EAAAA,IAAI,EAAEc,KAAK,CAACd;AADkB,CAAL,CAA7B;;AAIA,eAAeL,OAAO,CAACkB,eAAD,EAAkB;AAAEjB,EAAAA;AAAF,CAAlB,CAAP,CAAsCG,IAAtC,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\n// components\nimport Spinner from '../layout/Spinner'\nimport PostItem from '../posts/PostItem'\n\n// redux\nimport { connect } from 'react-redux'\nimport { getPost } from '../../actions/post'\nimport CommentItem from './CommentItem'\nimport CommentForm from './CommentForm'\n\nconst Post = ({ getPost, post: { post, loading }, match }) => {\n\n    useEffect(() => {\n        getPost(match.params.post_id)\n    }, [getPost])\n\n    return (\n        loading || post === null ? <Spinner /> : \n        <Fragment>\n                <PostItem post={post} showActions={false}/>\n                <CommentForm postId={post._id}/>\n                <div className=\"comments\">\n                    {post.comments.map(comment => <CommentItem key={comment._id} comment={comment} postId={post._id}/>)}\n                </div>\n        </Fragment>\n    )\n}\n\nPost.propTypes = {\n    getPost: PropTypes.func.isRequired,\n    post: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = state => ({\n    post: state.post,\n})\n\nexport default connect(mapStateToProps, { getPost })(Post)\n"]},"metadata":{},"sourceType":"module"}