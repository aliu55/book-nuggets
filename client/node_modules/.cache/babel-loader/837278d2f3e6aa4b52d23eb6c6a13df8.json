{"ast":null,"code":"var _jsxFileName = \"/Users/asl/PROJECTS/simply-vegan/simply-vegan-frontend/src/components/notes/Notes.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect } from 'react';\nimport PropTypes from 'prop-types'; // components\n\nimport Spinner from '../layout/Spinner';\nimport NoteItem from './NoteItem'; // redux\n\nimport { getBook } from '../../actions/book';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Notes = ({\n  getBook,\n  book: {\n    book,\n    loading\n  },\n  match\n}) => {\n  _s();\n\n  useEffect(() => {\n    getBook(match.params.book_id);\n  }, [getBook]);\n  return loading || book === null ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 18,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: book.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"notes cards\",\n      children: book.notes.map(note => /*#__PURE__*/_jsxDEV(NoteItem, {\n        note: note,\n        bookId: book._id\n      }, note._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Notes, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Notes;\nNotes.propTypes = {\n  getBook: PropTypes.func.isRequired,\n  book: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  book: state.book\n});\n\nexport default connect(mapStateToProps, {\n  getBook\n})(Notes);\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"sources":["/Users/asl/PROJECTS/simply-vegan/simply-vegan-frontend/src/components/notes/Notes.js"],"names":["React","Fragment","useEffect","PropTypes","Spinner","NoteItem","getBook","connect","Notes","book","loading","match","params","book_id","title","notes","map","note","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,YAAtB,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,QAAP,MAAqB,YAArB,C,CAEA;;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEF,EAAAA,OAAF;AAAWG,EAAAA,IAAI,EAAE;AAAEA,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAjB;AAAoCC,EAAAA;AAApC,CAAD,KAAiD;AAAA;;AAC7DT,EAAAA,SAAS,CAAC,MAAM;AACdI,IAAAA,OAAO,CAACK,KAAK,CAACC,MAAN,CAAaC,OAAd,CAAP;AACD,GAFQ,EAEN,CAACP,OAAD,CAFM,CAAT;AAIA,SAAOI,OAAO,IAAID,IAAI,KAAK,IAApB,gBACL,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UADK,gBAGL,QAAC,QAAD;AAAA,4BACE;AAAA,gBAAKA,IAAI,CAACK;AAAV;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACGL,IAAI,CAACM,KAAL,CAAWC,GAAX,CAAgBC,IAAD,iBACd,QAAC,QAAD;AAAyB,QAAA,IAAI,EAAEA,IAA/B;AAAqC,QAAA,MAAM,EAAER,IAAI,CAACS;AAAlD,SAAeD,IAAI,CAACC,GAApB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF;AAYD,CAjBD;;GAAMV,K;;KAAAA,K;AAmBNA,KAAK,CAACW,SAAN,GAAkB;AAChBb,EAAAA,OAAO,EAAEH,SAAS,CAACiB,IAAV,CAAeC,UADR;AAEhBZ,EAAAA,IAAI,EAAEN,SAAS,CAACmB,MAAV,CAAiBD;AAFP,CAAlB;;AAKA,MAAME,eAAe,GAAIC,KAAD,KAAY;AAClCf,EAAAA,IAAI,EAAEe,KAAK,CAACf;AADsB,CAAZ,CAAxB;;AAIA,eAAeF,OAAO,CAACgB,eAAD,EAAkB;AAAEjB,EAAAA;AAAF,CAAlB,CAAP,CAAsCE,KAAtC,CAAf","sourcesContent":["import React, { Fragment, useEffect } from 'react'\nimport PropTypes from 'prop-types'\n\n// components\nimport Spinner from '../layout/Spinner'\nimport NoteItem from './NoteItem'\n\n// redux\nimport { getBook } from '../../actions/book'\nimport { connect } from 'react-redux'\n\nconst Notes = ({ getBook, book: { book, loading }, match }) => {\n  useEffect(() => {\n    getBook(match.params.book_id)\n  }, [getBook])\n\n  return loading || book === null ? (\n    <Spinner />\n  ) : (\n    <Fragment>\n      <h1>{book.title}</h1>\n      <div className=\"notes cards\">\n        {book.notes.map((note) => (\n          <NoteItem key={note._id} note={note} bookId={book._id} />\n        ))}\n      </div>\n    </Fragment>\n  )\n}\n\nNotes.propTypes = {\n  getBook: PropTypes.func.isRequired,\n  book: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  book: state.book,\n})\n\nexport default connect(mapStateToProps, { getBook })(Notes)\n"]},"metadata":{},"sourceType":"module"}