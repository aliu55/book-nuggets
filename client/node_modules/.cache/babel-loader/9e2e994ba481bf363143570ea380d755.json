{"ast":null,"code":"import axios from 'axios';\nimport { config } from '../config'; // redux\n\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT, GET_USER_FAIL, GET_USER_SUCCESS } from './types'; // function for setting token\n\nimport setAuthToken from '../utils/setAuthToken'; // load user\n\nexport const getUser = () => async dispatch => {\n  if (localStorage.token) {\n    setAuthToken(localStorage.token);\n  }\n\n  try {\n    // if no token, then try to get user\n    const res = await axios.get(`${config.apiUrl}/auth`); // response from server contains user info\n\n    dispatch({\n      type: GET_USER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    dispatch({\n      type: GET_USER_FAIL\n    });\n  }\n}; // register user\n\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  try {\n    const apiConfig = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    }); // send request to create a user\n\n    const res = await axios.post(`${config.apiUrl}/users`, body, apiConfig); // response from server contains the user token\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n    dispatch(getUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n}; // login user\n\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  try {\n    const apiConfig = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      email,\n      password\n    }); // send request to login user\n\n    const res = await axios.post(`${config.apiUrl}/auth`, body, apiConfig); // response from server contains the user token\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n    dispatch(getUser());\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};\nexport const logout = () => async dispatch => {\n  dispatch({\n    type: LOGOUT\n  });\n};","map":{"version":3,"sources":["/Users/asl/PROJECTS/simply-vegan/simply-vegan-frontend/src/actions/auth.js"],"names":["axios","config","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","GET_USER_FAIL","GET_USER_SUCCESS","setAuthToken","getUser","dispatch","localStorage","token","res","get","apiUrl","type","payload","data","err","register","name","email","password","apiConfig","headers","body","JSON","stringify","post","errors","response","forEach","error","msg","login","logout"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { config } from '../config'\n\n// redux\nimport { setAlert } from './alert'\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n    GET_USER_FAIL,\n    GET_USER_SUCCESS,\n} from './types'\n\n// function for setting token\nimport setAuthToken from '../utils/setAuthToken'\n\n// load user\nexport const getUser = () => async (dispatch) => {\n    \n    if (localStorage.token) {\n        setAuthToken(localStorage.token)\n    }\n\n    try {\n\n        // if no token, then try to get user\n        const res = await axios.get(`${config.apiUrl}/auth`)\n\n        // response from server contains user info\n        dispatch({\n            type: GET_USER_SUCCESS,\n            payload: res.data\n        })\n\n    } catch (err) {\n        \n        dispatch({\n            type: GET_USER_FAIL\n        })\n\n    }\n}\n\n// register user\nexport const register = ({ name, email, password }) => async (dispatch) => {\n\n    try {\n\n        const apiConfig = {\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n\n        const body = JSON.stringify({\n            name,\n            email,\n            password\n        })\n\n        // send request to create a user\n        const res = await axios.post(`${config.apiUrl}/users`, body, apiConfig)\n\n        // response from server contains the user token\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        })\n\n        dispatch(getUser())\n\n    } catch (err) {\n\n        const errors = err.response.data.errors\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n        }\n\n        dispatch({\n            type: REGISTER_FAIL\n        })\n\n    }\n}\n\n// login user\nexport const login = ({ email, password }) => async (dispatch) => {\n\n    try {\n\n        const apiConfig = {\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n\n        const body = JSON.stringify({\n            email,\n            password\n        })\n\n        // send request to login user\n        const res = await axios.post(`${config.apiUrl}/auth`, body, apiConfig)\n\n        // response from server contains the user token\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        })\n\n        dispatch(getUser())\n\n    } catch (err) {\n\n        const errors = err.response.data.errors\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n        }\n\n        dispatch({\n            type: LOGIN_FAIL\n        })\n\n    }\n}\n\nexport const logout = () => async dispatch => {\n    dispatch({\n        type: LOGOUT\n    })\n}"]},"metadata":{},"sourceType":"module"}