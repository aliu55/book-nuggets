{"ast":null,"code":"import axios from 'axios';\nimport config from '../config'; // redux\n\nimport { setAlert } from './alert';\nimport { REGISTER_SUCCESS, REGISTER_FAIL, LOGIN_SUCCESS, LOGIN_FAIL, LOGOUT } from './types';\nexport const register = ({\n  name,\n  email,\n  password\n}) => async dispatch => {\n  try {\n    const apiConfig = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      name,\n      email,\n      password\n    }); // send request to create a user\n\n    const res = await axios.post(`${config.apiUrl}/users`, body, apiConfig); // response from server contains the user token\n\n    dispatch({\n      type: REGISTER_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: REGISTER_FAIL\n    });\n  }\n};\nexport const login = ({\n  email,\n  password\n}) => async dispatch => {\n  try {\n    const apiConfig = {\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    };\n    const body = JSON.stringify({\n      email,\n      password\n    }); // send request to login user\n\n    const res = await axios.post(`${config.apiUrl}/auth`, body, apiConfig); // response from server contains the user token\n\n    dispatch({\n      type: LOGIN_SUCCESS,\n      payload: res.data\n    });\n  } catch (err) {\n    const errors = err.response.data.errors;\n\n    if (errors) {\n      errors.forEach(error => dispatch(setAlert(error.msg, 'danger')));\n    }\n\n    dispatch({\n      type: LOGIN_FAIL\n    });\n  }\n};","map":{"version":3,"sources":["/Users/asl/PROJECTS/simply-vegan/simply-vegan-frontend/src/actions/auth.js"],"names":["axios","config","setAlert","REGISTER_SUCCESS","REGISTER_FAIL","LOGIN_SUCCESS","LOGIN_FAIL","LOGOUT","register","name","email","password","dispatch","apiConfig","headers","body","JSON","stringify","res","post","apiUrl","type","payload","data","err","errors","response","forEach","error","msg","login"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,MAAP,MAAmB,WAAnB,C,CAEA;;AACA,SAASC,QAAT,QAAyB,SAAzB;AACA,SACIC,gBADJ,EAEIC,aAFJ,EAGIC,aAHJ,EAIIC,UAJJ,EAKIC,MALJ,QAMO,SANP;AAQA,OAAO,MAAMC,QAAQ,GAAG,CAAC;AAAEC,EAAAA,IAAF;AAAQC,EAAAA,KAAR;AAAeC,EAAAA;AAAf,CAAD,KAA+B,MAAMC,QAAN,IAAkB;AAErE,MAAI;AAEA,UAAMC,SAAS,GAAG;AACdC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADK,KAAlB;AAMA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AACxBR,MAAAA,IADwB;AAExBC,MAAAA,KAFwB;AAGxBC,MAAAA;AAHwB,KAAf,CAAb,CARA,CAcA;;AACA,UAAMO,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAY,GAAElB,MAAM,CAACmB,MAAO,QAA5B,EAAqCL,IAArC,EAA2CF,SAA3C,CAAlB,CAfA,CAiBA;;AACAD,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAAElB,gBADD;AAELmB,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFR,KAAD,CAAR;AAKH,GAvBD,CAuBE,OAAOC,GAAP,EAAY;AAEV,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIhB,QAAQ,CAACV,QAAQ,CAAC0B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AAEDjB,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAAEjB;AADD,KAAD,CAAR;AAIH;AACJ,CAtCM;AAwCP,OAAO,MAAM0B,KAAK,GAAG,CAAC;AAAEpB,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAyB,MAAMC,QAAN,IAAkB;AAE5D,MAAI;AAEA,UAAMC,SAAS,GAAG;AACdC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AADK,KAAlB;AAMA,UAAMC,IAAI,GAAGC,IAAI,CAACC,SAAL,CAAe;AACxBP,MAAAA,KADwB;AAExBC,MAAAA;AAFwB,KAAf,CAAb,CARA,CAaA;;AACA,UAAMO,GAAG,GAAG,MAAMlB,KAAK,CAACmB,IAAN,CAAY,GAAElB,MAAM,CAACmB,MAAO,OAA5B,EAAoCL,IAApC,EAA0CF,SAA1C,CAAlB,CAdA,CAgBA;;AACAD,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAAEhB,aADD;AAELiB,MAAAA,OAAO,EAAEJ,GAAG,CAACK;AAFR,KAAD,CAAR;AAKH,GAtBD,CAsBE,OAAOC,GAAP,EAAY;AAEV,UAAMC,MAAM,GAAGD,GAAG,CAACE,QAAJ,CAAaH,IAAb,CAAkBE,MAAjC;;AAEA,QAAIA,MAAJ,EAAY;AACRA,MAAAA,MAAM,CAACE,OAAP,CAAeC,KAAK,IAAIhB,QAAQ,CAACV,QAAQ,CAAC0B,KAAK,CAACC,GAAP,EAAY,QAAZ,CAAT,CAAhC;AACH;;AAEDjB,IAAAA,QAAQ,CAAC;AACLS,MAAAA,IAAI,EAAEf;AADD,KAAD,CAAR;AAIH;AACJ,CArCM","sourcesContent":["import axios from 'axios'\nimport config from '../config'\n\n// redux\nimport { setAlert } from './alert'\nimport {\n    REGISTER_SUCCESS,\n    REGISTER_FAIL,\n    LOGIN_SUCCESS,\n    LOGIN_FAIL,\n    LOGOUT,\n} from './types'\n\nexport const register = ({ name, email, password }) => async dispatch => {\n\n    try {\n\n        const apiConfig = {\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n\n        const body = JSON.stringify({\n            name,\n            email,\n            password\n        })\n\n        // send request to create a user\n        const res = await axios.post(`${config.apiUrl}/users`, body, apiConfig)\n\n        // response from server contains the user token\n        dispatch({\n            type: REGISTER_SUCCESS,\n            payload: res.data\n        })\n\n    } catch (err) {\n\n        const errors = err.response.data.errors\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n        }\n\n        dispatch({\n            type: REGISTER_FAIL\n        })\n\n    }\n}\n\nexport const login = ({ email, password }) => async dispatch => {\n\n    try {\n\n        const apiConfig = {\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        }\n\n        const body = JSON.stringify({\n            email,\n            password\n        })\n\n        // send request to login user\n        const res = await axios.post(`${config.apiUrl}/auth`, body, apiConfig)\n\n        // response from server contains the user token\n        dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res.data\n        })\n\n    } catch (err) {\n\n        const errors = err.response.data.errors\n\n        if (errors) {\n            errors.forEach(error => dispatch(setAlert(error.msg, 'danger')))\n        }\n\n        dispatch({\n            type: LOGIN_FAIL\n        })\n\n    }\n}\n"]},"metadata":{},"sourceType":"module"}