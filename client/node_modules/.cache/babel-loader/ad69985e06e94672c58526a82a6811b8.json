{"ast":null,"code":"import _toConsumableArray from\"/Users/asl/PROJECTS/simply-vegan/simply-vegan-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _objectSpread from\"/Users/asl/PROJECTS/simply-vegan/simply-vegan-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import{GET_POSTS,GET_POST,UPDATE_LIKES,DELETE_POST,ADD_POST,POST_ERROR,ADD_COMMENT,DELETE_COMMENT}from'../actions/types';var initialState={posts:[],post:null,loading:true,error:{}// FIXME: why is error an empty object?\n};export default function postReducer(){var state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:initialState;var action=arguments.length>1?arguments[1]:undefined;var type=action.type,payload=action.payload;switch(type){case GET_POSTS:return _objectSpread(_objectSpread({},state),{},{posts:payload,loading:false});case GET_POST:return _objectSpread(_objectSpread({},state),{},{post:payload,loading:false});case DELETE_POST:return _objectSpread(_objectSpread({},state),{},{posts:state.posts.filter(function(post){return post._id!==payload;}),loading:false});case ADD_POST:return _objectSpread(_objectSpread({},state),{},{posts:[payload].concat(_toConsumableArray(state.posts)),loading:false});case UPDATE_LIKES:return _objectSpread(_objectSpread({},state),{},{posts:state.posts.map(function(post){return post._id===payload._id?_objectSpread(_objectSpread({},post),{},{likes:payload.likes}):post;}),loading:false});case ADD_COMMENT:return _objectSpread(_objectSpread({},state),{},{post:_objectSpread(_objectSpread({},state.post),{},{comments:payload}),loading:false});case DELETE_COMMENT:return _objectSpread(_objectSpread({},state),{},{post:_objectSpread(_objectSpread({},state.post),{},{comments:state.post.comments.filter(function(comment){return comment._id!==payload;})}),loading:false});case POST_ERROR:return _objectSpread(_objectSpread({},state),{},{loading:false,error:payload});default:return state;}}","map":{"version":3,"sources":["/Users/asl/PROJECTS/simply-vegan/simply-vegan-frontend/src/reducers/post.js"],"names":["GET_POSTS","GET_POST","UPDATE_LIKES","DELETE_POST","ADD_POST","POST_ERROR","ADD_COMMENT","DELETE_COMMENT","initialState","posts","post","loading","error","postReducer","state","action","type","payload","filter","_id","map","likes","comments","comment"],"mappings":"iWAAA,OACIA,SADJ,CAEIC,QAFJ,CAGIC,YAHJ,CAIIC,WAJJ,CAKIC,QALJ,CAMIC,UANJ,CAOIC,WAPJ,CAQIC,cARJ,KASO,kBATP,CAWA,GAAMC,CAAAA,YAAY,CAAG,CACjBC,KAAK,CAAE,EADU,CAEjBC,IAAI,CAAE,IAFW,CAGjBC,OAAO,CAAE,IAHQ,CAIjBC,KAAK,CAAE,EAAG;AAJO,CAArB,CAOA,cAAe,SAASC,CAAAA,WAAT,EAAmD,IAA9BC,CAAAA,KAA8B,2DAAtBN,YAAsB,IAARO,CAAAA,MAAQ,2CAC9D,GAAQC,CAAAA,IAAR,CAA0BD,MAA1B,CAAQC,IAAR,CAAcC,OAAd,CAA0BF,MAA1B,CAAcE,OAAd,CAEA,OAAQD,IAAR,EAEI,IAAKhB,CAAAA,SAAL,CACI,sCACOc,KADP,MAEIL,KAAK,CAAEQ,OAFX,CAGIN,OAAO,CAAE,KAHb,GAMJ,IAAKV,CAAAA,QAAL,CACI,sCACOa,KADP,MAEIJ,IAAI,CAAEO,OAFV,CAGIN,OAAO,CAAE,KAHb,GAMJ,IAAKR,CAAAA,WAAL,CACI,sCACOW,KADP,MAEIL,KAAK,CAAEK,KAAK,CAACL,KAAN,CAAYS,MAAZ,CAAmB,SAAAR,IAAI,QAAIA,CAAAA,IAAI,CAACS,GAAL,GAAaF,OAAjB,EAAvB,CAFX,CAGIN,OAAO,CAAE,KAHb,GAMJ,IAAKP,CAAAA,QAAL,CACI,sCACOU,KADP,MAEIL,KAAK,EAAGQ,OAAH,4BAAeH,KAAK,CAACL,KAArB,EAFT,CAGIE,OAAO,CAAE,KAHb,GAMJ,IAAKT,CAAAA,YAAL,CACI,sCACOY,KADP,MAEIL,KAAK,CAAEK,KAAK,CAACL,KAAN,CAAYW,GAAZ,CAAgB,SAAAV,IAAI,QAAIA,CAAAA,IAAI,CAACS,GAAL,GAAaF,OAAO,CAACE,GAArB,gCAAgCT,IAAhC,MAAsCW,KAAK,CAAEJ,OAAO,CAACI,KAArD,GAA8DX,IAAlE,EAApB,CAFX,CAGIC,OAAO,CAAE,KAHb,GAMJ,IAAKL,CAAAA,WAAL,CACI,sCACOQ,KADP,MAEIJ,IAAI,gCAAOI,KAAK,CAACJ,IAAb,MAAmBY,QAAQ,CAAEL,OAA7B,EAFR,CAGIN,OAAO,CAAE,KAHb,GAMJ,IAAKJ,CAAAA,cAAL,CACI,sCACOO,KADP,MAEIJ,IAAI,gCAAOI,KAAK,CAACJ,IAAb,MAAmBY,QAAQ,CAAER,KAAK,CAACJ,IAAN,CAAWY,QAAX,CAAoBJ,MAApB,CAA2B,SAAAK,OAAO,QAAIA,CAAAA,OAAO,CAACJ,GAAR,GAAgBF,OAApB,EAAlC,CAA7B,EAFR,CAGIN,OAAO,CAAE,KAHb,GAMJ,IAAKN,CAAAA,UAAL,CACI,sCACOS,KADP,MAEIH,OAAO,CAAE,KAFb,CAGIC,KAAK,CAAEK,OAHX,GAMJ,QACI,MAAOH,CAAAA,KAAP,CA3DR,CA8DH","sourcesContent":["import {\n    GET_POSTS,\n    GET_POST,\n    UPDATE_LIKES,\n    DELETE_POST,\n    ADD_POST,\n    POST_ERROR,\n    ADD_COMMENT,\n    DELETE_COMMENT,\n} from '../actions/types'\n\nconst initialState = {\n    posts: [],\n    post: null,\n    loading: true,\n    error: {} // FIXME: why is error an empty object?\n}\n\nexport default function postReducer(state = initialState, action) {\n    const { type, payload } = action\n    \n    switch (type) {\n\n        case GET_POSTS:\n            return {\n                ...state,\n                posts: payload,\n                loading: false,\n            }\n        \n        case GET_POST:\n            return {\n                ...state,\n                post: payload,\n                loading: false,\n            }\n        \n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(post => post._id !== payload),\n                loading: false\n            }\n        \n        case ADD_POST:\n            return {\n                ...state,\n                posts: [payload, ...state.posts],\n                loading: false\n            }\n        \n        case UPDATE_LIKES:\n            return {\n                ...state,\n                posts: state.posts.map(post => post._id === payload._id ? { ...post, likes: payload.likes} : post),\n                loading: false,\n            }\n        \n        case ADD_COMMENT:\n            return {\n                ...state,\n                post: { ...state.post, comments: payload },\n                loading: false,\n            }\n        \n        case DELETE_COMMENT:\n            return {\n                ...state,\n                post: { ...state.post, comments: state.post.comments.filter(comment => comment._id !== payload) },\n                loading: false,\n            }\n        \n        case POST_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: payload\n            }\n        \n        default:\n            return state\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}