{"ast":null,"code":"import { GET_POSTS, GET_POST, UPDATE_LIKES, DELETE_POST, ADD_POST, POST_ERROR, ADD_COMMENT, DELETE_COMMENT } from '../actions/types';\nconst initialState = {\n  posts: [],\n  post: null,\n  loading: true,\n  error: {} // FIXME: why is error an empty object?\n\n};\nexport default function postReducer(state = initialState, action) {\n  const {\n    type,\n    payload\n  } = action;\n\n  switch (type) {\n    case GET_POSTS:\n      return { ...state,\n        posts: payload,\n        loading: false\n      };\n\n    case GET_POST:\n      return { ...state,\n        post: payload,\n        loading: false\n      };\n\n    case DELETE_POST:\n      return { ...state,\n        posts: state.posts.filter(post => post._id !== payload),\n        loading: false\n      };\n\n    case ADD_POST:\n      return { ...state,\n        posts: [payload, ...state.posts],\n        loading: false\n      };\n\n    case UPDATE_LIKES:\n      return { ...state,\n        posts: state.posts.map(post => post._id === payload._id ? { ...post,\n          likes: payload.likes\n        } : post),\n        loading: false\n      };\n\n    case ADD_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: payload\n        },\n        loading: false\n      };\n\n    case DELETE_COMMENT:\n      return { ...state,\n        post: { ...state.post,\n          comments: state.post.comments.filter(comment => comment._id !== payload)\n        },\n        loading: false\n      };\n\n    case POST_ERROR:\n      return { ...state,\n        loading: false,\n        error: payload\n      };\n\n    default:\n      return state;\n  }\n}","map":{"version":3,"sources":["/Users/asl/PROJECTS/simply-vegan/simply-vegan-frontend/src/reducers/post.js"],"names":["GET_POSTS","GET_POST","UPDATE_LIKES","DELETE_POST","ADD_POST","POST_ERROR","ADD_COMMENT","DELETE_COMMENT","initialState","posts","post","loading","error","postReducer","state","action","type","payload","filter","_id","map","likes","comments","comment"],"mappings":"AAAA,SACIA,SADJ,EAEIC,QAFJ,EAGIC,YAHJ,EAIIC,WAJJ,EAKIC,QALJ,EAMIC,UANJ,EAOIC,WAPJ,EAQIC,cARJ,QASO,kBATP;AAWA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,KAAK,EAAE,EADU;AAEjBC,EAAAA,IAAI,EAAE,IAFW;AAGjBC,EAAAA,OAAO,EAAE,IAHQ;AAIjBC,EAAAA,KAAK,EAAE,EAJU,CAIP;;AAJO,CAArB;AAOA,eAAe,SAASC,WAAT,CAAqBC,KAAK,GAAGN,YAA7B,EAA2CO,MAA3C,EAAmD;AAC9D,QAAM;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAoBF,MAA1B;;AAEA,UAAQC,IAAR;AAEI,SAAKhB,SAAL;AACI,aAAO,EACH,GAAGc,KADA;AAEHL,QAAAA,KAAK,EAAEQ,OAFJ;AAGHN,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKV,QAAL;AACI,aAAO,EACH,GAAGa,KADA;AAEHJ,QAAAA,IAAI,EAAEO,OAFH;AAGHN,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKR,WAAL;AACI,aAAO,EACH,GAAGW,KADA;AAEHL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYS,MAAZ,CAAmBR,IAAI,IAAIA,IAAI,CAACS,GAAL,KAAaF,OAAxC,CAFJ;AAGHN,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKP,QAAL;AACI,aAAO,EACH,GAAGU,KADA;AAEHL,QAAAA,KAAK,EAAE,CAACQ,OAAD,EAAU,GAAGH,KAAK,CAACL,KAAnB,CAFJ;AAGHE,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKT,YAAL;AACI,aAAO,EACH,GAAGY,KADA;AAEHL,QAAAA,KAAK,EAAEK,KAAK,CAACL,KAAN,CAAYW,GAAZ,CAAgBV,IAAI,IAAIA,IAAI,CAACS,GAAL,KAAaF,OAAO,CAACE,GAArB,GAA2B,EAAE,GAAGT,IAAL;AAAWW,UAAAA,KAAK,EAAEJ,OAAO,CAACI;AAA1B,SAA3B,GAA8DX,IAAtF,CAFJ;AAGHC,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKL,WAAL;AACI,aAAO,EACH,GAAGQ,KADA;AAEHJ,QAAAA,IAAI,EAAE,EAAE,GAAGI,KAAK,CAACJ,IAAX;AAAiBY,UAAAA,QAAQ,EAAEL;AAA3B,SAFH;AAGHN,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKJ,cAAL;AACI,aAAO,EACH,GAAGO,KADA;AAEHJ,QAAAA,IAAI,EAAE,EAAE,GAAGI,KAAK,CAACJ,IAAX;AAAiBY,UAAAA,QAAQ,EAAER,KAAK,CAACJ,IAAN,CAAWY,QAAX,CAAoBJ,MAApB,CAA2BK,OAAO,IAAIA,OAAO,CAACJ,GAAR,KAAgBF,OAAtD;AAA3B,SAFH;AAGHN,QAAAA,OAAO,EAAE;AAHN,OAAP;;AAMJ,SAAKN,UAAL;AACI,aAAO,EACH,GAAGS,KADA;AAEHH,QAAAA,OAAO,EAAE,KAFN;AAGHC,QAAAA,KAAK,EAAEK;AAHJ,OAAP;;AAMJ;AACI,aAAOH,KAAP;AA3DR;AA8DH","sourcesContent":["import {\n    GET_POSTS,\n    GET_POST,\n    UPDATE_LIKES,\n    DELETE_POST,\n    ADD_POST,\n    POST_ERROR,\n    ADD_COMMENT,\n    DELETE_COMMENT,\n} from '../actions/types'\n\nconst initialState = {\n    posts: [],\n    post: null,\n    loading: true,\n    error: {} // FIXME: why is error an empty object?\n}\n\nexport default function postReducer(state = initialState, action) {\n    const { type, payload } = action\n    \n    switch (type) {\n\n        case GET_POSTS:\n            return {\n                ...state,\n                posts: payload,\n                loading: false,\n            }\n        \n        case GET_POST:\n            return {\n                ...state,\n                post: payload,\n                loading: false,\n            }\n        \n        case DELETE_POST:\n            return {\n                ...state,\n                posts: state.posts.filter(post => post._id !== payload),\n                loading: false\n            }\n        \n        case ADD_POST:\n            return {\n                ...state,\n                posts: [payload, ...state.posts],\n                loading: false\n            }\n        \n        case UPDATE_LIKES:\n            return {\n                ...state,\n                posts: state.posts.map(post => post._id === payload._id ? { ...post, likes: payload.likes} : post),\n                loading: false,\n            }\n        \n        case ADD_COMMENT:\n            return {\n                ...state,\n                post: { ...state.post, comments: payload },\n                loading: false,\n            }\n        \n        case DELETE_COMMENT:\n            return {\n                ...state,\n                post: { ...state.post, comments: state.post.comments.filter(comment => comment._id !== payload) },\n                loading: false,\n            }\n        \n        case POST_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: payload\n            }\n        \n        default:\n            return state\n        \n    }\n}"]},"metadata":{},"sourceType":"module"}