{"ast":null,"code":"var _jsxFileName = \"/Users/asl/PROJECTS/simply-vegan/simply-vegan-frontend/src/components/notes/Notes.js\",\n    _s = $RefreshSig$();\n\nimport React, { Fragment, useEffect, useState } from 'react';\nimport PropTypes from 'prop-types';\nimport './Notes.css'; // components\n\nimport Spinner from '../layout/Spinner';\nimport NoteItem from './NoteItem';\nimport AddButton from '../layout/AddButton';\nimport CreateNoteModal from './CreateNoteModal'; // redux\n\nimport { getBook } from '../../actions/book';\nimport { connect } from 'react-redux';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Notes = ({\n  getBook,\n  book: {\n    book,\n    loading\n  },\n  match\n}) => {\n  _s();\n\n  const [showModal, setShowModal] = useState(false);\n  useEffect(() => {\n    getBook(match.params.book_id);\n  }, [getBook]);\n\n  const refreshPage = () => {\n    setShowModal(false);\n    getBook();\n  };\n\n  return loading || book === null ? /*#__PURE__*/_jsxDEV(Spinner, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this) : /*#__PURE__*/_jsxDEV(Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: showModal ? 'notes blur' : 'notes',\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: book.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"note-add\",\n        onClick: () => setShowModal(true),\n        children: /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"note-add-icon\",\n          children: \"+\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), book.notes.map(note => /*#__PURE__*/_jsxDEV(NoteItem, {\n        note: note,\n        bookId: book._id\n      }, note._id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), showModal && /*#__PURE__*/_jsxDEV(CreateNoteModal, {\n      onCancel: () => setShowModal(false),\n      onCreate: refreshPage,\n      bookId: book._id\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Notes, \"yDc3Km869gD6lnL/d2JehHdpdes=\");\n\n_c = Notes;\nNotes.propTypes = {\n  getBook: PropTypes.func.isRequired,\n  book: PropTypes.object.isRequired\n};\n\nconst mapStateToProps = state => ({\n  book: state.book\n});\n\nexport default connect(mapStateToProps, {\n  getBook\n})(Notes);\n\nvar _c;\n\n$RefreshReg$(_c, \"Notes\");","map":{"version":3,"sources":["/Users/asl/PROJECTS/simply-vegan/simply-vegan-frontend/src/components/notes/Notes.js"],"names":["React","Fragment","useEffect","useState","PropTypes","Spinner","NoteItem","AddButton","CreateNoteModal","getBook","connect","Notes","book","loading","match","showModal","setShowModal","params","book_id","refreshPage","title","notes","map","note","_id","propTypes","func","isRequired","object","mapStateToProps","state"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,QAArC,QAAqD,OAArD;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAO,aAAP,C,CAEA;;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAOC,SAAP,MAAsB,qBAAtB;AACA,OAAOC,eAAP,MAA4B,mBAA5B,C,CAEA;;AACA,SAASC,OAAT,QAAwB,oBAAxB;AACA,SAASC,OAAT,QAAwB,aAAxB;;;AAEA,MAAMC,KAAK,GAAG,CAAC;AAAEF,EAAAA,OAAF;AAAWG,EAAAA,IAAI,EAAE;AAAEA,IAAAA,IAAF;AAAQC,IAAAA;AAAR,GAAjB;AAAoCC,EAAAA;AAApC,CAAD,KAAiD;AAAA;;AAC7D,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,KAAD,CAA1C;AAEAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,OAAO,CAACK,KAAK,CAACG,MAAN,CAAaC,OAAd,CAAP;AACD,GAFQ,EAEN,CAACT,OAAD,CAFM,CAAT;;AAIA,QAAMU,WAAW,GAAG,MAAM;AACxBH,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACAP,IAAAA,OAAO;AACR,GAHD;;AAKA,SAAOI,OAAO,IAAID,IAAI,KAAK,IAApB,gBACL,QAAC,OAAD;AAAA;AAAA;AAAA;AAAA,UADK,gBAGL,QAAC,QAAD;AAAA,4BAQE;AAAK,MAAA,SAAS,EAAEG,SAAS,GAAG,YAAH,GAAkB,OAA3C;AAAA,8BACE;AAAA,kBAAKH,IAAI,CAACQ;AAAV;AAAA;AAAA;AAAA;AAAA,cADF,eAGE;AAAK,QAAA,SAAS,EAAC,UAAf;AAA0B,QAAA,OAAO,EAAE,MAAMJ,YAAY,CAAC,IAAD,CAArD;AAAA,+BACE;AAAM,UAAA,SAAS,EAAC,eAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,cAHF,EAOGJ,IAAI,CAACS,KAAL,CAAWC,GAAX,CAAgBC,IAAD,iBACd,QAAC,QAAD;AAAyB,QAAA,IAAI,EAAEA,IAA/B;AAAqC,QAAA,MAAM,EAAEX,IAAI,CAACY;AAAlD,SAAeD,IAAI,CAACC,GAApB;AAAA;AAAA;AAAA;AAAA,cADD,CAPH;AAAA;AAAA;AAAA;AAAA;AAAA,YARF,EAoBGT,SAAS,iBACR,QAAC,eAAD;AACE,MAAA,QAAQ,EAAE,MAAMC,YAAY,CAAC,KAAD,CAD9B;AAEc,MAAA,QAAQ,EAAEG,WAFxB;AAGc,MAAA,MAAM,EAAEP,IAAI,CAACY;AAH3B;AAAA;AAAA;AAAA;AAAA,YArBJ;AAAA;AAAA;AAAA;AAAA;AAAA,UAHF;AAgCD,CA5CD;;GAAMb,K;;KAAAA,K;AA8CNA,KAAK,CAACc,SAAN,GAAkB;AAChBhB,EAAAA,OAAO,EAAEL,SAAS,CAACsB,IAAV,CAAeC,UADR;AAEhBf,EAAAA,IAAI,EAAER,SAAS,CAACwB,MAAV,CAAiBD;AAFP,CAAlB;;AAKA,MAAME,eAAe,GAAIC,KAAD,KAAY;AAClClB,EAAAA,IAAI,EAAEkB,KAAK,CAAClB;AADsB,CAAZ,CAAxB;;AAIA,eAAeF,OAAO,CAACmB,eAAD,EAAkB;AAAEpB,EAAAA;AAAF,CAAlB,CAAP,CAAsCE,KAAtC,CAAf","sourcesContent":["import React, { Fragment, useEffect, useState } from 'react'\nimport PropTypes from 'prop-types'\nimport './Notes.css'\n\n// components\nimport Spinner from '../layout/Spinner'\nimport NoteItem from './NoteItem'\nimport AddButton from '../layout/AddButton'\nimport CreateNoteModal from './CreateNoteModal'\n\n// redux\nimport { getBook } from '../../actions/book'\nimport { connect } from 'react-redux'\n\nconst Notes = ({ getBook, book: { book, loading }, match }) => {\n  const [showModal, setShowModal] = useState(false)\n\n  useEffect(() => {\n    getBook(match.params.book_id)\n  }, [getBook])\n\n  const refreshPage = () => {\n    setShowModal(false)\n    getBook()\n  }\n\n  return loading || book === null ? (\n    <Spinner />\n  ) : (\n    <Fragment>\n      {/* <AddButton />\n      <div className=\"notes\">\n        {book.notes.map((note) => (\n          <NoteItem key={note._id} note={note} bookId={book._id} />\n        ))}\n      </div> */}\n\n      <div className={showModal ? 'notes blur' : 'notes'}>\n        <h1>{book.title}</h1>\n\n        <div className=\"note-add\" onClick={() => setShowModal(true)}>\n          <span className=\"note-add-icon\">+</span>\n        </div>\n\n        {book.notes.map((note) => (\n          <NoteItem key={note._id} note={note} bookId={book._id} />\n        ))}\n      </div>\n\n      {showModal && (\n        <CreateNoteModal\n          onCancel={() => setShowModal(false)}\n                      onCreate={refreshPage}\n                      bookId={book._id}\n        />\n      )}\n    </Fragment>\n  )\n}\n\nNotes.propTypes = {\n  getBook: PropTypes.func.isRequired,\n  book: PropTypes.object.isRequired,\n}\n\nconst mapStateToProps = (state) => ({\n  book: state.book,\n})\n\nexport default connect(mapStateToProps, { getBook })(Notes)\n"]},"metadata":{},"sourceType":"module"}